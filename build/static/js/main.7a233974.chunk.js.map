{"version":3,"sources":["serviceWorker.js","useInfiniteScroll.js","Message.js","Filter.js","MessageGrid.js","index.js"],"names":["Boolean","window","location","hostname","match","useInfiniteScroll","callback","_useState","useState","_useState2","Object","slicedToArray","isFetching","setIsFetching","handleScroll","innerHeight","document","documentElement","scrollTop","offsetHeight","useEffect","addEventListener","removeEventListener","console","log","Message","Array","from","keys","n","listItems","setListItems","_useInfiniteScroll","setTimeout","prevState","concat","toConsumableArray","length","_useInfiniteScroll2","react_default","a","createElement","map","listItem","Filter","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","messageTyepeList","value","Row","Col","dist_default","data","multiple","buttonText","options","select","React","Component","MessageGrid","Container","src_Filter","Table","variant","striped","bordered","hover","src_Message","ReactDOM","render","src_MessageGrid","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a233974.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { useState, useEffect } from 'react';\n\nconst useInfiniteScroll = (callback) => {\n  const [isFetching, setIsFetching] = useState(false);\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  useEffect(() => {\n    if (!isFetching) return;\n    callback(() => {\n      console.log('called back');\n    });\n  }, [isFetching]);\n\n  function handleScroll() {\n    if (window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight || isFetching) return;\n    setIsFetching(true);\n  }\n\n  return [isFetching, setIsFetching];\n};\n\nexport default useInfiniteScroll;","import React, { useState } from 'react';\nimport useInfiniteScroll from \"./useInfiniteScroll\";\nconst Message = () => {\n    const [listItems, setListItems] = useState(Array.from(Array(30).keys(), n => n + 1));\n    const [isFetching, setIsFetching] = useInfiniteScroll(fetchMoreListItems);\n\n    function fetchMoreListItems() {\n        setTimeout(() => {\n            setListItems(prevState => ([...prevState, ...Array.from(Array(20).keys(), n => n + prevState.length + 1)]));\n            setIsFetching(false);\n        }, 2000);\n    }\n\n    return (\n\n        <tbody>\n            {listItems.map(listItem =>\n                <tr>\n                    <td>INFO</td>\n                    <td>127.0.0.1</td>\n                    <td>OK</td>\n                </tr>\n            )}\n        </tbody>\n    );\n}\n\nexport default Message;","import React from 'react'\nimport { Row, Col } from 'react-bootstrap';\nimport Multiselect from 'react-bootstrap-multiselect';\nimport 'react-bootstrap-multiselect/css/bootstrap-multiselect.css'\nclass Filter extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { messageTyepeList: [{ value: \"INFO\" }, { value: \"ERROR\" }, { value: \"WARN\" }] };\n    }\n\n    render() {\n        return (\n            <Row>\n                <Col>\n                    <Multiselect data={this.state.messageTyepeList} multiple buttonText={function(options, select) {\n                        return 'Message Type';\n                    }}/>\n                </Col>\n                <Col>\n                \n                </Col>\n            </Row>\n\n        );\n    }\n}\n\nexport default Filter","\nimport React from 'react';\nimport { Table, Row, Container, Col } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/css/bootstrap-theme.min.css';\nimport Message from './Message';\nimport Filter from './Filter'\nclass MessageGrid extends React.Component {\n\n    render() {\n        return (\n            <Container>\n                <Filter/>\n                <Row>\n                    <Col>\n                        <Table variant=\"condensed\" striped bordered hover>\n                            <thead>\n                                <tr>\n                                    <th>Message Type</th>\n                                    <th>Device IP</th>\n                                    <th>Health</th>\n                                </tr>\n                            </thead>\n\n                            <Message />\n\n                        </Table>\n                    </Col>\n                </Row>\n            </Container>);\n    }\n}\n\nexport default MessageGrid","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/css/bootstrap-theme.min.css';\nimport MessageGrid from './MessageGrid';  \n\n\nReactDOM.render(<MessageGrid />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}